import SwiftUI

struct PushView: View {
    private var manager = NotificationManager.shared
    
    var body: some View {
        ZStack {
            LinearGradient(
                gradient: Gradient(colors: [.cyan, .pink]),
                startPoint: .leading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()
            
            VStack {
                Image("push")
                    .resizable()
                    .scaledToFit()
                    .padding()
                
                Button {
                    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { success, error in
                        if success {
                            print("Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
                        } else if let error = error {
                            print(error.localizedDescription)
                        }
                    }
                    let sound = UNNotificationSound.init(named: UNNotificationSoundName(rawValue: "Notification.mp3"))
                    manager.scheduleLocalNotification(title: "–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", body: "–Ø —Ö–æ—Ç–µ–ª –±—ã –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Ç–µ–±—è —Å –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º - —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! –≠—Ç–æ –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å! üéâü•Çüçæ", sound: sound)
                } label: {
                    Text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                        .frame(width: 150)
                        .foregroundColor(.white)
                        .font(.headline)
                        .padding()
                        .background(
                            RoundedRectangle(
                                cornerRadius: 20,
                                style: .continuous
                            )
                            .fill(.cyan)
                        )
                        .overlay {
                            RoundedRectangle(
                                cornerRadius: 20,
                                style: .continuous
                            )
                            .stroke(.pink, lineWidth: 2)
                        }
                }
                .padding()
                
                Button {
                    manager.cancelAllNotifications()
                } label: {
                    Text("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                        .frame(width: 150)
                        .foregroundColor(.white)
                        .font(.headline)
                        .padding()
                        .background(
                            RoundedRectangle(
                                cornerRadius: 20,
                                style: .continuous
                            )
                            .fill(.red)
                        )
                        .overlay {
                            RoundedRectangle(
                                cornerRadius: 20,
                                style: .continuous
                            )
                            .stroke(.cyan, lineWidth: 2)
                        }
                }
            }
            .padding()
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        PushView()
    }
}
